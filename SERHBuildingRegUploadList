public with sharing class SERHBuildingRegUploadList {

    List<ProjWrapper> projs {get;set;}
    private String state = '';
    public String lastRefresh {get; set;}

    // instantiate the StandardSetController from a query locator
    public ApexPages.StandardSetController con {
        get {
            if(con == null) {
                con = new ApexPages.StandardSetController(Database.getQueryLocator([Select name, id, Project_Status__c, Createddate, 
                                                                                    Hers_Rater__c, hers_rater__r.Name,
                                                                                    Rating_Field_Inspector__c, Rating_Field_Inspector__r.Name,
                                                                                    hers_rater__r.number_of_needed_file_qa__c, Ekotrope_Link__c,
                                                                                    hers_rater__r.Number_of_File_QA_Started__c,
                                                                                    SERH_Number_of_Units__c, Number_of_Inspections__c,
                                                                                    Ekotrope_ID__c,
                                                                                    (select ENERGY_STAR_v3__c, Rating_Type__c, Fee_per_Unit__c 
                                                                                     from SERH_Data__r where Export_Type__c = 'HERS')
                                                                                    from project__c where Project_Status__c='In Progress'
                                                                                    and recordtypeid = '0120B000000t8JVQAY'
                                                                                    Order By Createddate desc limit 100]));
                // sets the number of records in each page set
                con.setPageSize(20);
                
            }
            List<AsyncApexJob> jobList = [SELECT Id, Status, ApexClass.Name, completeddate
                      FROM AsyncApexJob where apexclass.name='SERHprojectRegistryUpdater' and Status='Completed'
                      Order by CompletedDate desc limit 1];
            if (joblist.size()>0) lastRefresh = joblist.get(0).completedDate.format();
                
            return con;
        }
        set;
    }

    // returns a list of wrapper objects for the sObjects in the current page set
    public List<ProjWrapper> getProjects() {
        projs = new List<ProjWrapper>();
        for (Project__c proji : (List<Project__c>)con.getRecords())
            projs.add(new ProjWrapper(proji));
        System.Debug('found '+String.valueOf(projs.size()));
        return projs;
    }
    /** Was learning addMessage functionality--learned: In vf page, make the button rerender the messages section by id!
     * public PageReference test(){
     *    ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'No Response'));
     *    return null;
    }
**/
    // Uploads selected projects to building registry
     public PageReference process() {
         System.debug('begin process method');
         list<Project__c> projToUpload = new List<Project__c>();
         System.debug('initialized an empty project list');
         //List<String> msgs = new List<String>();//comment this later
         //
         //As long as there are projects to iterate over, do so!
         System.debug('projs.size():'+projs.size());
         if (projs.size() > 0){
             for (ProjWrapper p : projs) {
               if (p.checked){
                    projToUpload.add(p.proj);
                    //msgs.add(p.proj.Name + '-Fakely Submitted');//comment this later
                }
                 }
             if (projToUpload.size() > 0){
                 List<String> msgs = uploadtoRegistry.uploadToBuildingRegistry(projToUpload);
                 state = 'Finished.';

         
         System.debug('messages from BuildingReg: ' + msgs.size());
         if(msgs.size() > 0){
             for (String idIter : msgs){
                 ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,idIter));
                 System.Debug('adding message %%%%%%%%%%%%%%%%%%%%%%% ' + idIter);
             }
         }
         else ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'No Response '));
                                  state = 'Finished.';

         return null;
             }
             else {
                 ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'No records selected'));
                 state = 'Finished.';

                 return null;
             }
         }
         else {
             ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'No results to update'));
             state = 'Finished.';
             return null;
         }
     }
    public void syncWithEkotrope(){
        serhSchedulable ssched = new serhSchedulable();
        if(!Test.isRunningTest()) ssched.execute(null);
        ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'Ekotrope sync request submitted. Please wait a minute or more as projects are updated.'));
    }

    // indicates whether there are more records after the current page set.
    public Boolean hasNext {
        get {
            return con.getHasNext();
        }
        set;
    }

    // indicates whether there are more records before the current page set.
    public Boolean hasPrevious {
        get {
            return con.getHasPrevious();
        }
        set;
    }

    // returns the page number of the current page set
    public Integer pageNumber {
        get {
            return con.getPageNumber();
        }
        set;
    }

    // returns the first page of records
     public void first() {
         con.save();
         con.first();
     }

     // returns the last page of records
     public void last() {
         con.save();
         con.last();
     }

     // returns the previous page of records
     public void previous() {
         con.save();
             
         con.previous();
     }

     // returns the next page of records
     public void next() {
         con.save();
         con.next();
     }
//This bit seems to break salesforce; commenting out to see if it helps
     // returns the PageReference of the original page, if known, or the home page.
    // public void cancel() {
         
   //      con.cancel();
//}
    public String getState(){
        return state;
    }
    public void setState(String n){
        state = n;
    }

    public class ProjWrapper {

        public Boolean checked{ get; set; }
       public Project__c proj { get; set;}
        public String creaxDate {get; set;}
        public Decimal QAleft {get; set;}
        public String ESv3Status {get; set;}
        public Decimal feePerUnit {get; set;}
        public String RatingType {get; set;}

        public ProjWrapper(){
            proj = new Project__c(); 
            checked = false;
            creaxDate = 'no Project Entered';
            QAleft = 0;
            ESv3Status = '';
            feePerUnit = 0;
        }

        public ProjWrapper(Project__c p){
            proj = p;
          checked = false;
            //CreatedDate formatting so it's not in GMT!
            //<3 lucky we're in a rapper class! <3
            creaxDate = p.CreatedDate.format();
            //Now let's add some formula columns
            //First, we want QA remaining
            //That means Needed minus Started
            if (p.hers_rater__c != null){
                if (p.hers_rater__r.number_of_needed_file_qa__c != null){
                    if (p.hers_rater__r.Number_of_File_QA_Started__c != null){
                    QAleft = p.hers_rater__r.number_of_needed_file_qa__c-p.hers_rater__r.Number_of_File_QA_Started__c;
                    } else (QAleft = p.hers_rater__r.number_of_needed_file_qa__c);}

            } else {
                QAleft = null;
            }
            system.debug('Project Name' + p.Name + 'serh data size: ' + p.SERH_Data__r.size());
            //Now Energy Star Status and TYpe from the HERS record
            if (p.SERH_Data__r.size() > 0){
                SERH_Data__c currDat = p.SERH_Data__r[0];
                RatingType = currDat.Rating_Type__c;
                ESv3Status = currDat.ENERGY_STAR_v3__c;
                feePerUnit = currDat.Fee_per_Unit__c;
                
            } else{
                RatingType = '';
                ESv3Status = '';
                feePerUnit = 0;
            }
      }
/**
    public static testMethod void testMe() {

        CategoryWrapper cw = new CategoryWrapper();
        System.assertEquals(cw.checked,false);

        CategoryWrapper cw2 = new CategoryWrapper(new Cat3__c(name='Test1'));
        System.assertEquals(cw2.cat.name,'Test1');
        System.assertEquals(cw2.checked,false);

    }
**/
}
}
