global class SERH_uploadToBuildingRegistry implements Database.Batchable<Project__c>, Database.AllowsCallouts, Database.Stateful {

    global String authorization = '';
    global List<Project__c> projectsToUpdate = new List<Project__c>();
    global void setAuthorization(String auth){
        authorization = auth;
    }

    global Iterable<Project__c> start(Database.BatchableContext bc){
        for(Project__c existingProject : [Select Ekotrope_ID__c, Ekotrope_selfOrPlanLastSavedAt__c, Id
                                              FROM Project__c
                                              WHERE Ekotrope_ID__c != null
                                              and RecordTypeId='0120B000000t8JVQAY'
                                              and Project_Status__c = 'In Progress'])
            {projectsToUpdate.add(existingProject);}
        return projectsToUpdate;
    }

    global void execute(Database.BatchableContext bc, List<Project__c> projectsToUpdate){
        System.debug(projectsToUpdate);
        Date uploadDate = Date.today();
        for(Project__c currentProj : projectsToUpdate){
            if(Test.isRunningTest()) {
                Test.setMock(HttpCalloutMock.class, new YourHttpPutCalloutMockImpl());
                System.Debug('Setting test mock YourHttpPutCalloutMockImpl');
            }


            HttpResponse uploadResponse = SERH.putToBuildingRegistry(authorization, currentProj.Ekotrope_ID__c);
            String plan = String.valueOf(uploadResponse.getBody());
            uploadResponseJSON2Apex upload = uploadResponseJSON2Apex.parse(plan);


            if(uploadResponse.getStatusCode() != 418){
                if(upload.registryID != null){
                    system.debug(upload);
                    currentProj.RESNET_Registry_ID__c = upload.registryId;
                    currentProj.EC_Registration_Date__c = uploadDate;
                    currentProj.Project_Status__c = 'Completed';
                }
                else{
                    //If actual error, make inspection record.
                    // Write rawRegistryResponse and errorMessage to notes field of autoQaRecord
                    // automaticQaStatus = Fail, Warn, NotChecked, Pass
                    system.debug('here');
                    system.debug(uploadResponse.getStatusCode());
                    Inspections__c inspectionRecord = SERH.constructAutoQaRecord(currentProj.id);//, True, False, False
                    inspectionRecord.Building_Registry_Upload_Error__c = TRUE;
                    inspectionRecord.SERH_Notes_SERH__c = upload.rawRegistryResponse;

                    if(upload.automaticQaStatus == 'Fail' || upload.automaticQaStatus == 'NotChecked'){//or upload.automaticQaStatus == 'Warn'
                        inspectionRecord.Ekotrope_QA_Error__c = TRUE;
                        //need to add errorMessage to uploadResponseJSON2Apex so
                        //we can write those notes to the inspection record
                    }
                    currentProj.Project_Status__c = 'On Hold';
                    //update currentProj;
                    insert inspectionRecord;
                }
            }
            else{
                //If tea pot error, just put it off again = status = In Progress
                currentProj.Project_Status__c = 'In Progress';
            }
        }
        system.debug(projectsToUpdate);
        update projectsToUpdate;
    }

    global void finish(Database.BatchableContext bc){
        system.debug(projectsToUpdate);
    }


}
