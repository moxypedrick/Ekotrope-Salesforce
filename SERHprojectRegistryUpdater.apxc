//David Pedrick 9/13/2018
//
//SERHprojectRegistryUpdater class grabs ekotrope project records and 
//compiles them into Salesforce Project and SERH Data Records. 
//
//To do this it utilizes the Ekotrope API endpoints found here: https://ekotrope.api-docs.io/v1.0.0/endpoints
//
//The class implements the following:
//Batchable - allows the work in this class to be completed in batches when Salesforce has necessary resources
//AllowsCallouts - allows this class to make API requests
//Stateful - I don't remember what this does.

global class SERHprojectRegistryUpdater implements Database.Batchable<String>, Database.AllowsCallouts, Database.Stateful{

    global String username = '##########';
    global String password = '##########';
    global String newProjectsList = '';
    private String ekotropeStatus = '';
    private String updateStatus = '';
    private String ekotropeStage = '';
    private boolean regularRun = True;
    private string baselineBuilding = '';
    private string referenceBuilding = '';
    private string designBuilding = '';
    private string dataPrefix = '';
    global Datetime lastSchedulableRunTime = Datetime.newInstance(1999, 1, 1, 12, 59, 59);
    
    //Encrypt the Username and password:
    global Blob headerValue = Blob.valueOf(username + ':' + password);
    global String authorization = ('Basic ' + EncodingUtil.base64Encode(headerValue));
    
    global List<Project__c> ekotropeIdList = new List<Project__c>();
    global List<SERH_Data__c> serhDataList = new List<SERH_Data__c>();
    global List<String> projectIdList = new List<String>();
    
    global Map<String, String> accountsMap = new Map<String, String>();
    global Map<String, String> projectMap = new Map<String, String>();
    global Map<String, String> serhDataMap = new Map<String, String>();
    global Map<String, String> raterMap = new Map<String, String>();
    global Map<String, String> ekotropeMap = new Map<String, String>();
    private final Map<String, List<String>> newList = new Map<String, List<String>>();
    private final List<string> codesToCheck = new List<string>();
    private final List<string> buildingsToCheck = new List<string>();
    
    //This sets which Ekotrope Status this code queries from the Project List API
    //The options are: "SUBMITTED_FOR_QA", "SUBMITTED_TO_REGISTRY", "UNREGISTERED",
    //"REGISTERED_WITH_PROVIDER"
    global void setVariables(String stage){
        ekotropeStage = stage;        
    }
    
    //A regular run (TRUE) is a run in which we create projects and serh data with status 
    //HERS. If we want to make serh data that is not of status "HERS" the setNonRegRun
    //should be set to FALSE.
    global void setNonRegRun(boolean regRun){
        regularRun = regRun;
    }
    
    //Sets codes which will be evaluated for compliance 
    //in the Ekotrope calculation engine.
    global void setCodesToCheck(List<string> codes){
        integer i = codes.size();
        integer beg = 0;
        while(beg < i){
            codesToCheck.add(codes[beg]);
            beg++;
        }
    }
    
    //The SERH Data object has fields to hold energy use data for three types of 
    //home analysis. These results represent the three basic home energy evaluations
    //for a HERS Rating - (HERS Index = ???? / Reference ; D)
    global void setBuildingRun(string baseline, string reference, string design){
        baselineBuilding = baseline;
        referenceBuilding = reference;
        designBuilding = design;
        buildingsToCheck.add(baseline);
        buildingsToCheck.add(reference);
        buildingsToCheck.add(design);
        }
    //This sets the SERH Data records Upload Type field. This should be 
    //descriptive of the setBuildingRun scenario. Current Salesforce field optoins are
    //HERS, 2012 IECC, 2009 IECC 
    global void setSERHDataName(string prefix){
        dataPrefix = prefix;
        System.Debug('Set prefix to '+prefix);
    }
    
    //
    global Iterable<String> start(Database.BatchableContext bc){
        if(regularRun){
            //newList = new Map<String, List<String>>(); <--we may have to put this somewhere
            List<string> types = new List<string>();
            for(Project__c existingProject : [Select Ekotrope_ID__c, Ekotrope_selfOrPlanLastSavedAt__c
                                              FROM Project__c
                                             WHERE Ekotrope_ID__c != null and RecordTypeId='0120B000000t8JVQAY'])
            {projectMap.put(existingProject.Ekotrope_ID__c, existingProject.Ekotrope_selfOrPlanLastSavedAt__c);}
            
        if(test.isRunningTest()){Test.setMock(HttpCalloutMock.class, new YourHttpUpdaterProj() );}
            String newProjectsList = String.valueOf(EkotropeAPIconnector_DP.getprojectList(authorization, ekotropeStage).getBody());
            List<projectListJSON2Apex> newProjects = projectListJSON2Apex.parse(newProjectsList);
            List<Object> newResults = (List<Object>)JSON.deserializeUntyped(newProjectsList);
            
            for(Object project : newResults){
                Map<String,Object> data = (Map<String,Object>)project;
                List <String> subList = new List<String>();
                if (projectMap.get(String.valueOf(data.get('id'))) == null) {
                    projectIdList.add(String.valueOf(data.get('id')));
                    subList.add('update status');
                    subList.add(ekotropeStage);
                    newList.put(String.valueOf(data.get('id')),subList); 
                                            //System.Debug('Sublist is ' + sublist.size()+' units long');

                } else  {
                    if(data.get('selfOrPlanLastSavedAt') != projectMap.get(String.valueOf(data.get('id')))){
                        projectIdList.add(String.valueOf(data.get('id')));
                        subList.add('no status update');
                        subList.add(ekotropeStage);
                        newList.put(String.valueOf(data.get('id')),subList);
                        //System.Debug('Sublist is ' + sublist.size()+' units long');
                    }

                }
            }
        return projectIdList;    
        }
       
        else{
            for(Project__c existingProject : [Select Ekotrope_ID__c, Ekotrope_selfOrPlanLastSavedAt__c
                                              FROM Project__c
                                              WHERE Ekotrope_ID__c != null and RecordTypeId = '0120B000000t8JVQAY'])
            {projectMap.put(existingProject.Ekotrope_ID__c, existingProject.Ekotrope_selfOrPlanLastSavedAt__c);}
            
            for(SERH_Data__c existingData : [Select id, Project__c
                                            From SERH_Data__c
                                            WHERE Export_Type__c = :dataPrefix])
            {serhDataMap.put(existingData.Project__c, existingData.id);}
            
            for(String i:projectMap.keySet()){
                if(serhDataMap.get(i) == null){
                    projectIdList.add(i);
                }
            }
            
            //projectIdList.addAll(projectMap.keySet());    
        	return projectIdList;   
        }
    } 

    global void execute(Database.BatchableContext bc, List<String> projectsToUpdate){
        if(regularRun){
            for(Qualifications_del__c existingContact : [Select Qualifications_for__c, 
                                                     HERS_RTIN_Rater_Identification_Number__c
                                                     FROM Qualifications_del__c
                                                     WHERE HERS_RTIN_Rater_Identification_Number__c !=null ])
        {raterMap.put(existingContact.HERS_RTIN_Rater_Identification_Number__c, existingContact.Qualifications_for__c);}
        for(Account existingAccounts : [Select Ekotrope_ID__c, Id FROM Account WHERE Ekotrope_ID__c != ''])
        {accountsMap.put(existingAccounts.Ekotrope_ID__c, existingAccounts.Id);}  
            
        
    
        for(String projectId:projectsToUpdate){
            
            if(newList.get(projectId)[1] == null){
                ekotropeStatus = 'SUBMITTED_FOR_QA';
            }else{
                ekotropeStatus = newList.get(projectId)[1];
            }
            
            if(newList.get(projectId)[0] == null){
                updateStatus = 'update status';
            }else{
                updateStatus = newList.get(projectId)[0];
            }
            //if this is a test method we need to set the appropriate mock class
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpProjectCalloutMockImplJG() ); }
            HttpResponse projectResponse = ekotropeAPIconnector_DP.getProject(authorization, projectId);                
            String newProject = String.valueOf(projectResponse.getBody());
            projectJSON2Apex.aProjectJSON2Apex qProject = projectJSON2Apex.parse(newProject); 
            
            //if this is a test method we need to set the appropriate mock class
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpHouseCalloutMocklJG() ); }
            HttpResponse planResponse = ekotropeAPIconnector_DP.getHousePlan(authorization, qProject.masterPlanId);
            String plan = String.valueOf(planResponse.getBody());
            planJson2Apex.aPlanJson2Apex qplan = planJson2Apex.parse(plan);
            
            //if this is a test method we need to set the appropriate mock class
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
            HttpResponse analysisResponse = ekotropeAPIconnector_DP.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'EkotropeAsModeled', codesToCheck);
            String AsIsAnalysis = String.valueOf(analysisResponse.getBody());
            analysisJson2Apex.pAnalysisJson2Apex AsIsAnalysisResults = analysisJson2Apex.parse(AsIsAnalysis); 
            
            //if this is a test method we need to set the appropriate mock class
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
            HttpResponse ReferenceAnalysisResponse = ekotropeAPIconnector_DP.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSReference', codesToCheck);
            String ReferenceAnalysis = String.valueOf(ReferenceAnalysisResponse.getBody());
            analysisJson2Apex.pAnalysisJson2Apex ReferencenalysisResults = analysisJson2Apex.parse(ReferenceAnalysis); 
            
            //if this is a test method we need to set the appropriate mock class
            if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
            HttpResponse DesignanalysisResponse = ekotropeAPIconnector_DP.getHousePlanAnalysis(authorization, qProject.masterPlanId, 'HERSRated', codesToCheck);
            String DesignAnalysis = String.valueOf(DesignanalysisResponse.getBody());
            analysisJson2Apex.pAnalysisJson2Apex DesignAnalysisResults = analysisJson2Apex.parse(DesignAnalysis); 
            
           
            String HERS_Rater =  raterMap.get(String.valueOf(qProject.hersRatingDetails.rater.resnetRaterId));
            
            String RFI_Rater = null;
            if (qProject.hersRatingDetails.associatedUsers.size() > 0){
                //if (qProject.hersRatingDetails.associatedUsers[0] instanceOf projectJSON2Apex.associatedUsers){
                    RFI_Rater = raterMap.get(String.valueof(qProject.hersRatingDetails.associatedUsers[0].fieldInspectorId));
                
            } else{
                RFI_Rater = raterMap.get(String.valueOf(qProject.hersRatingDetails.rater.resnetRaterId));
            }      
            
            
            String ratingOrganization = accountsMap.get(String.valueof(qProject.hersRatingDetails.rater.ratingCompany.id));
            Project__c projectRecord = serhRecordConstructor.constructProject(qProject, AsIsAnalysisResults, HERS_Rater, RFI_Rater, ratingOrganization,newList.get(projectId)[1], newList.get(projectId)[0]);
            SERH_Data__c SerhRecord = serhRecordConstructor.constructDataRecord(qProject, qplan, AsIsAnalysisResults, ReferencenalysisResults, DesignAnalysisResults, dataPrefix);
            
            ekotropeMap.put(qProject.masterPlanId, qProject.id);
            ekotropeIdList.add(projectRecord); 
            serhDataList.add(serhRecord);          
        }
        //System.Debug(ekotropeIdList);
        upsert ekotropeIdList Project__c.Fields.Ekotrope_ID__c; 
        
        for (Project__c aProject : ekotropeIdList){
            projectMap.put(aProject.Ekotrope_ID__c, aProject.id);
        }    
        for(SERH_Data__c sData : serhDataList){
            sData.Project__c = projectMap.get(ekotropeMap.get(sData.Ekotrope_Plan_ID__c));
        }  
        System.Debug(serhDataList);
 		upsert serhDataList SERH_Data__c.Fields.Ekotrope_Plan_ID__c; 
        serhDataList.clear();
        ekotropeIdList.clear();
        }
        
        else{
            for(String projectId:projectsToUpdate){
                
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpProjectCalloutMockImplJG() ); }
                HttpResponse projectResponse = ekotropeAPIconnector_DP.getProject(authorization, projectId);                
                String newProject = String.valueOf(projectResponse.getBody());
                projectJSON2Apex.aProjectJSON2Apex qProject = projectJSON2Apex.parse(newProject); 
                
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpHouseCalloutMocklJG() ); }
                HttpResponse planResponse = ekotropeAPIconnector_DP.getHousePlan(authorization, qProject.masterPlanId);
                String plan = String.valueOf(planResponse.getBody());
                planJson2Apex.aPlanJson2Apex qplan = planJson2Apex.parse(plan);
                
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
                HttpResponse analysisResponse = ekotropeAPIconnector_DP.getHousePlanAnalysis(authorization, qProject.masterPlanId, baselineBuilding, codesToCheck);
                String AsIsAnalysis = String.valueOf(analysisResponse.getBody());
                analysisJson2Apex.pAnalysisJson2Apex AsIsAnalysisResults = analysisJson2Apex.parse(AsIsAnalysis); 
                
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
                HttpResponse ReferenceAnalysisResponse = ekotropeAPIconnector_DP.getHousePlanAnalysis(authorization, qProject.masterPlanId, referenceBuilding, codesToCheck);
                String ReferenceAnalysis = String.valueOf(ReferenceAnalysisResponse.getBody());
                analysisJson2Apex.pAnalysisJson2Apex ReferencenalysisResults = analysisJson2Apex.parse(ReferenceAnalysis); 
                
                //if this is a test method we need to set the appropriate mock class
                if (Test.isRunningTest()) {Test.setMock(HttpCalloutMock.class, new YourHttpAnalysisCalloutMockJG() ); }
                HttpResponse DesignanalysisResponse = ekotropeAPIconnector_DP.getHousePlanAnalysis(authorization, qProject.masterPlanId, designBuilding, codesToCheck);
                String DesignAnalysis = String.valueOf(DesignanalysisResponse.getBody());
                analysisJson2Apex.pAnalysisJson2Apex DesignAnalysisResults = analysisJson2Apex.parse(DesignAnalysis); 

            	String HERS_Rater =  raterMap.get(String.valueOf(qProject.hersRatingDetails.rater.resnetRaterId));
           		String ratingOrganization = accountsMap.get(String.valueof(qProject.hersRatingDetails.rater.ratingCompany.id));
 	
            	SERH_Data__c SerhRecord = serhRecordConstructor.constructDataRecord(qProject, qplan, AsIsAnalysisResults, ReferencenalysisResults, DesignAnalysisResults, dataPrefix);
            
            	//ekotropeIdList.add(projectRecord); 
            	serhDataList.add(serhRecord); 
            }
            
        //upsert ekotropeIdList Project__c.Fields.Ekotrope_ID__c; 
            Map<String, String> idMap = new Map<String, String>();
            for(Serh_Data__c existingData : [Select Ekotrope_plan_id__c, id, Project__c
                                            From SERH_Data__c
                                            WHERE Ekotrope_plan_id__c != null])
            {idMap.put(existingData.Ekotrope_Plan_Id__c, existingData.Project__c);}
            
                     
        for (Project__c aProject : ekotropeIdList){
            projectMap.put(aProject.Ekotrope_ID__c, aProject.id);
        }    
        for(SERH_Data__c sData : serhDataList){
            sData.Project__c = idMap.get(sData.Ekotrope_Plan_ID__c);
        }  
        
 		insert serhDataList; 
        serhDataList.clear();
        ekotropeIdList.clear();
        
              
            }
    }
            
    
    global void finish(Database.BatchableContext bc){
        projectMap.clear();    
    }
       
}
