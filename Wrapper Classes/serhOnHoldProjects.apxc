// wrapper class that makes a view of projects that are on hold
// It includes buttons to push files to the auto qa process
//
// David Pedrick
// 9.18.2019


public class serhOnHoldProjects {

    List<ProjWrapper> projs {get;set;}
    List<id> projIdList {get;set;}
    private String state = '';
    public String lastRefresh {get; set;}

    // instantiate the StandardSetController from a query locator
    public ApexPages.StandardSetController con {
        get {
            if(con == null) {
                con = new ApexPages.StandardSetController(Database.getQueryLocator([Select name, id, Project_Status__c, Createddate,
                                                                                    Hers_Rater__c, hers_rater__r.Name,
                                                                                    Rating_Field_Inspector__c, Rating_Field_Inspector__r.Name,
                                                                                    hers_rater__r.number_of_needed_file_qa__c, Ekotrope_Link__c,
                                                                                    hers_rater__r.Number_of_File_QA_Started__c,
                                                                                    SERH_Number_of_Units__c, Number_of_Inspections__c,
                                                                                    Ekotrope_ID__c,
                                                                                    (select ENERGY_STAR_v3__c, Rating_Type__c, Fee_per_Unit__c
                                                                                     from SERH_Data__r where Export_Type__c = 'HERS')
                                                                                    from project__c where Project_Status__c = 'On Hold'
                                                                                    and recordtypeid = '0120B000000t8JVQAY'
                                                                                    Order By Createddate desc limit 100]));
                // sets the number of records in each page set
                con.setPageSize(10);

            }
            List<AsyncApexJob> jobList = [SELECT Id, Status, ApexClass.Name, completeddate
                      FROM AsyncApexJob where apexclass.name='SERHprojectRegistryUpdater' and Status='Completed'
                      Order by CompletedDate desc limit 1];
            if (joblist.size()>0) lastRefresh = joblist.get(0).completedDate.format();

            return con;
        }
        set;
    }

    // returns a list of wrapper objects for the sObjects in the current page set
    public List<ProjWrapper> getProjects() {
        projs = new List<ProjWrapper>();
        for (Project__c proji : (List<Project__c>)con.getRecords())
            projs.add(new ProjWrapper(proji));
        System.Debug('found '+String.valueOf(projs.size()));
        return projs;
    }

    // Uploads selected projects to building registry
     public PageReference process() {
         projIdList = new List<id>();
         if (projs.size() > 0){
             for (ProjWrapper p : projs) {
             	if (p.checked){

                    Project__c projectRecord;
                    projectRecord = [SELECT Project_Status__c, ID
                             FROM Project__c WHERE ID = :p.projId];
                    projIdList.add(projectRecord.id);
                    //projectRecord.Project_Status__c = 'In Progress';
                    //update projectRecord;
                }
             }
             SERH.determineQaNeed(projIdList);
         }
         return null;
     }

    public void match(){
        //serhSchedulable ssched = new serhSchedulable();
        //if(!Test.isRunningTest()) ssched.execute(null);
        ApexPages.addMessage(new ApexPages.message(ApexPages.severity.INFO,'This will take you to a page that shows likely File QA Matches'));
    }

    // indicates whether there are more records after the current page set.
    public Boolean hasNext {
        get {
            return con.getHasNext();
        }
        set;
    }

    // indicates whether there are more records before the current page set.
    public Boolean hasPrevious {
        get {
            return con.getHasPrevious();
        }
        set;
    }

    // returns the page number of the current page set
    public Integer pageNumber {
        get {
            return con.getPageNumber();
        }
        set;
    }

    // returns the first page of records
     public void first() {
         con.save();
         con.first();
     }

     // returns the last page of records
     public void last() {
         con.save();
         con.last();
     }

     // returns the previous page of records
     public void previous() {
         con.save();

         con.previous();
     }

     // returns the next page of records
     public void next() {
         con.save();
         con.next();
     }

    public String getState(){
        return state;
    }
    public void setState(String n){
        state = n;
    }
    public class ProjWrapper {
        public id projId {get;set;}
  	    public Boolean checked{ get; set; }
 	    public Project__c proj { get; set;}
        public String ProjStatus {get; set;}
        public String creaxDate {get; set;}
        public Decimal QAleft {get; set;}
        public String ESv3Status {get; set;}
        public Decimal feePerUnit {get; set;}
        public String RatingType {get; set;}

        public ProjWrapper(){
            proj = new Project__c();
            checked = false;
            creaxDate = 'no Project Entered';
            QAleft = 0;
            ESv3Status = '';
            feePerUnit = 0;
            ProjStatus = '';
        }

        public ProjWrapper(Project__c p){
            proj = p;
	        checked = false;
            ProjStatus = p.Project_Status__c;
            projId = p.id;
            //CreatedDate formatting so it's not in GMT!
            //<3 lucky we're in a rapper class! <3
            creaxDate = p.CreatedDate.format();
            //Now let's add some formula columns
            //First, we want QA remaining
            //That means Needed minus Started
            if (p.hers_rater__c != null){
                if (p.hers_rater__r.number_of_needed_file_qa__c != null){
                    if (p.hers_rater__r.Number_of_File_QA_Started__c != null){
                    QAleft = p.hers_rater__r.number_of_needed_file_qa__c-p.hers_rater__r.Number_of_File_QA_Started__c;
                    } else (QAleft = p.hers_rater__r.number_of_needed_file_qa__c);}

            } else {
                QAleft = null;
            }
            system.debug('Project Name' + p.Name + 'serh data size: ' + p.SERH_Data__r.size());
            //Now Energy Star Status and TYpe from the HERS record
            if (p.SERH_Data__r.size() > 0){
                SERH_Data__c currDat = p.SERH_Data__r[0];
                RatingType = currDat.Rating_Type__c;
                ESv3Status = currDat.ENERGY_STAR_v3__c;
                feePerUnit = currDat.Fee_per_Unit__c;

            } else{
                RatingType = '';
                ESv3Status = '';
                feePerUnit = 0;
            }
	    }
	}
}
