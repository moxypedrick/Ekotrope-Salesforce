public class ekotropeAPIconnector_DP {
    
    
    public static HttpResponse getProjectList(String authorization, String statusType){
        Http http = new Http();
        HttpRequest request = new HttpRequest();      
        request.setEndpoint('https://app.ekotrope.com/api/v1/projects?status='+statusType);//SUBMITTED_TO_REGISTRY');
        request.setMethod('GET');
        request.setHeader('authorization', authorization);
        HttpResponse response = http.send(request);
        return response;
   	}
    
    public static HttpResponse getProject(String authorization, String ekotropeId){
        String project = ekotropeId;
        Http http = new Http();
        HttpRequest request = new HttpRequest();
		request.setEndpoint('https://app.ekotrope.com/api/v1/projects/'+project);
		request.setMethod('GET');
		request.setHeader('authorization', 'Basic ################################');     
		HttpResponse projectResponse = http.send(request); 
        return projectResponse;
            
    }
    
    public static HttpResponse getHousePlan(String authorization, String ekotropeMasterPlanId){
        String planID = ekotropeMasterPlanId;
        Http http = new Http();
        HttpRequest request = new HttpRequest();
		request.setEndpoint('https://app.ekotrope.com/api/v1/houseplans/' + planID);
		request.setMethod('GET');
        request.setHeader('authorization', authorization);
		HttpResponse planResponse = http.send(request); 
        return planResponse;
               
    }
    
    public static HttpResponse getHousePlanAnalysis(String authorization, String ekotropeMasterPlanId, String buildingType, List<String> codesToCheck){
        String planID = ekotropeMasterPlanId;
        String building = buildingType;
        String codesString = '';
        for(String i : codesToCheck){
            codesString = codesString +'&codesToCheck=' + i;
        }
        
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://app.ekotrope.com/api/v1/planAnalysis/'+planID+'?buildingType='+ buildingType + codesString);
		request.setMethod('GET');
		request.setHeader('authorization', 'Basic ################################');
		HttpResponse planAnalysisResponse = http.send(request); 
        return planAnalysisResponse;
               
    }  
    
    public static HttpResponse putToBuildingRegistry(String authorization, String ekotropeId){
        String planID = ekotropeId;
        Http http = new Http();
		HttpRequest request = new HttpRequest();
		request.setEndpoint('https://api.ekotrope.com/api/v1/resnet/registeredProjects/'+planID);
		request.setMethod('PUT');
		request.setHeader('authorization', 'Basic ################################');
        request.setTimeout(20000);
		HttpResponse putResponse = http.send(Request); 
        return putResponse;
           
    }  
    
    public static List<List<String>> getProjectUpdateList(String authorization, String status){
        
        Map<String, String> projectMap = new Map<String, String>();
        List <List<String>> newList = new List<List<String>>();
        
        List<String> idSet = new List<String>();
    	
        for(Project__c existingProject : [Select Ekotrope_ID__c, Ekotrope_selfOrPlanLastSavedAt__c
                                          FROM Project__c
                                         Where recordtypeid = '0120B000000t8JVQAY' and Ekotrope_ID__c!= null]){
            projectMap.put(existingProject.Ekotrope_ID__c, existingProject.Ekotrope_selfOrPlanLastSavedAt__c);
                                         }
        String newProjectsList = String.valueOf(EkotropeAPIconnector_DP.getprojectList(authorization, status).getBody());
        
        List<projectListJSON2Apex> newProjects = projectListJSON2Apex.parse(newProjectsList);
        List<Object> newResults = (List<Object>)JSON.deserializeUntyped(newProjectsList);
        
        for(Object project : newResults){
            Map<String,Object> data = (Map<String,Object>)project;
            List <String> subList = new List<String>();
    		if (projectMap.get(String.valueOf(data.get('id'))) == null) {
                subList.add(String.valueOf(data.get('id')));
                subList.add('update status');
                subList.add('status');
                newList.add(subList);        		
            } else  {
        		if(data.get('selfOrPlanLastSavedAt') != projectMap.get(String.valueOf(data.get('id')))){
            		subList.add(String.valueOf(data.get('id')));
                	subList.add('no status update');
                    subList.add('status');
                    newList.add(subList);   
                }
            }
        }
        return newList;
    }   
}
