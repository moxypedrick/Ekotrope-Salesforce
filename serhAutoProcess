//David Pedrick
//4-4-2019
//
//It will randomly select projects for QA (both estar and regular)
//It will create QA records for projects that are selected
//It will upload projects to the building registry that do not need QA
//

global class serhAutoProcess{
 
    public static void determineQaNeed(List<id> projectIds){
        //iterate thru list       
        for(id projectId : projectIds){    
            //get project with soql
             Project__c projectRecord;
             projectRecord = [SELECT HERS_Rater__c, Rating_Field_Inspector__c, Project_Status__c, ID, Energy_STAR_v3__c, Ekotrope_ID__c, Name FROM Project__c WHERE ID = :projectId];
             id hersRater = projectRecord.HERS_Rater__c;
             system.debug(projectRecord.Name);
             //console.log(projectRecord.Name);
             Map<id, boolean> idMap = new Map<id, boolean>();
             for(Qualifications_del__c autoUploadStatus : [Select Approved_for_Auto_Upload__c, id, Qualifications_for__c
                                            From Qualifications_del__c
                                            ])
            {idMap.put(autoUploadStatus.Qualifications_for__c, autoUploadStatus.Approved_for_Auto_Upload__c);}
 
            //determine if the project is estar: if true then preform separate coin flip.
            if(Boolean.valueOf(projectRecord.Energy_Star_v3__c) == TRUE){
                Integer eStarFiles =  [select count()
                                     from project__c
                                     Where HERS_Rater__c = :hersRater and ((EC_Registration_Date__c = LAST_YEAR
                                                                                     and Energy_Star_v3__c = 'pass'
                                                                                     and recordtypeid = '0120B000000t8JVQAY')
                                     
                                     or (recordtypeid = '0120B000000t8JVQAY' 
                                         and Energy_Star_v3__c = 'pass'
                                         and Project_Status__c = 'pending review'
                                         and EC_Registration_Date__c = Null)
                                     
                                     or (recordtypeid = '0120B000000t8JVQAY' 
                                         and Energy_Star_v3__c = 'pass'
                                         and Project_Status__c = 'in progress'
                                         and EC_Registration_Date__c = Null))
                                    ];
                Integer eStarFileQA = [select count()
                                                   from inspections__c
                                                   Where QA_Year_SERH__c = '2018'
                                                   and Energy_Star__c = TRUE
                                                   and recordTypeID = '0120B0000005kLZQAY'
                                                   and HERS_Rater_Name_SERH__c = :hersRater];
                Double TotaleStarQaNeed = Math.ceil(double.valueOf(eStarFiles)/10);
                
                if(eStarFileQA == 0){
                    Inspections__c newInspection = serhRecordConstructor.constructInspectionRecord(projectRecord.Id);
                    insert newInspection;
                } else if(math.random() > 0.5) {
                    //flip coin
                    system.debug('First Coin Flip was greater than 0.5');
                	Double eStarFileQaLeft = TotaleStarQaNeed - eStarFileQa;
                    //if eStarFileQaLeft > 0 == TRUE then we can create a QA
                    if(eStarFileQaLeft >= 0){
                        Inspections__c newInspection = serhRecordConstructor.constructInspectionRecord(projectRecord.Id);
                        insert newInspection;
                    }
                }
            } 
            
            Integer regFiles =  [select count()
                                       from project__c
                                       Where HERS_Rater__c = :hersRater 
                                       and 
                                             ((EC_Registration_Date__c = LAST_YEAR
                                               and recordtypeid = '0120B000000t8JVQAY')
                                              
                                           or (recordtypeid = '0120B000000t8JVQAY'
                                                and Project_Status__c = 'pending review'
                                                and EC_Registration_Date__c = Null)
                                                                             
                                            or (recordtypeid = '0120B000000t8JVQAY' 
                                                and Project_Status__c = 'in progress'
                                                and EC_Registration_Date__c = Null))
                                      ];  
            
            Integer regFileQA = [select count()
                                              from inspections__c
                                              Where QA_Year_SERH__c = '2018'
                                              and recordTypeID = '0120B0000005kLZQAY'
                                              and HERS_Rater_Name_SERH__c = :hersRater]; 
                       
            if(regFileQA == 0){
                Inspections__c newInspection = serhRecordConstructor.constructInspectionRecord(projectRecord.Id);
                insert newInspection;
            } else if(math.random() > 0.5){
                system.debug('Second coin flip was greater than 0.5');
                //This file was randomly selected for regular file qa: determine if they need QA
                Double TotalFileQaNeed = Math.ceil(double.valueOf(regFiles)/10);
                Double regFileQaLeft = TotalFileQaNeed - regFileQa;
                if(regFileQaLeft >= 0){
                    Inspections__c newInspection = serhRecordConstructor.constructInspectionRecord(projectRecord.Id);
                    insert newInspection;
                }
            } 
            else{
                //This file was not needed for estar or regular file qa: upload to building registry
                //Make sure they have the auto-upload is activated
                system.debug(idMap.get(projectRecord.HERS_Rater__c));
                system.debug(idMap.get(projectRecord.Rating_Field_Inspector__c));
                boolean rater;
                boolean rfi;
                if(idMap.get(projectRecord.HERS_Rater__c) == null){
                    rater = false;
                } else{
                    rater = idMap.get(projectRecord.HERS_Rater__c);
                }
                
                if(idMap.get(projectRecord.Rating_Field_Inspector__c) == null){
                    rfi = false;
                } else{
                    rfi = idMap.get(projectRecord.Rating_Field_Inspector__c);
                }
                if(rater && rfi){
                    projectRecord.Project_Status__c = 'Completed';
                    update projectRecord;
                    //projectRecord.Project_Status__c = "Completed";
                    //String username = 'southface-api';
                	//String password = 'wYFUCL5z';
                	//Blob headerValue = Blob.valueOf(username + ':' + password);
                	//String authorization = ('Basic ' + EncodingUtil.base64Encode(headerValue));
                	//HttpResponse buildingRegistryPut = ekotropeAPIconnector_DP.putToBuildingRegistry(authorization, projectRecord.Ekotrope_ID__c);
                }
                //
                
            }
        }
    } 
}
